//! # D-Bus interface proxy for: `fi.w1.wpa_supplicant1.BSS`
//!
//! This code was generated by `zbus-xmlgen` `5.0.1` from D-Bus introspection data.
//! Source: `fi.w1.wpa_supplicant1.bss.xml`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//! This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
//! following zbus API can be used:
//!
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PropertiesProxy`]
//!
//! Consequently `zbus-xmlgen` did not generate code for the above interfaces.
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::proxy;
#[proxy(interface = "fi.w1.wpa_supplicant1.BSS")]
pub trait BSS {
    /// PropertiesChanged signal
    #[zbus(signal)]
    fn properties_changed(
        &self,
        properties: std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// Age property
    #[zbus(property)]
    fn age(&self) -> zbus::Result<u32>;

    /// BSSID property
    #[zbus(property, name = "BSSID")]
    fn bssid(&self) -> zbus::Result<Vec<u8>>;

    /// Frequency property
    #[zbus(property)]
    fn frequency(&self) -> zbus::Result<u16>;

    /// IEs property
    #[zbus(property, name = "IEs")]
    fn ies(&self) -> zbus::Result<Vec<u8>>;

    /// Mode property
    #[zbus(property)]
    fn mode(&self) -> zbus::Result<String>;

    /// Privacy property
    #[zbus(property)]
    fn privacy(&self) -> zbus::Result<bool>;

    /// RSN property
    #[zbus(property, name = "RSN")]
    fn rsn(&self) -> zbus::Result<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>;

    /// Rates property
    #[zbus(property)]
    fn rates(&self) -> zbus::Result<Vec<u32>>;

    /// SSID property
    #[zbus(property, name = "SSID")]
    fn ssid(&self) -> zbus::Result<Vec<u8>>;

    /// Signal property
    #[zbus(property)]
    fn signal(&self) -> zbus::Result<i16>;

    /// WPA property
    #[zbus(property, name = "WPA")]
    fn wpa(&self) -> zbus::Result<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>;

    /// WPS property
    #[zbus(property, name = "WPS")]
    fn wps(&self) -> zbus::Result<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>;
}
